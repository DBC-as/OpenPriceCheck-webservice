; inifile for openpricecheck

[setup]

version = 1.1

; in_house_domain may use ?ShowInfo and use create_sample form
;in_house_domain = .dbc.dk

; set to TRUE to expose the create_sample form
;show_samples = 1

; validate
;validate[request] = openpricecheck.xsd
;validate[response] = openpricecheck.xsd
validate[pricequery] = pricequery_supplier.xsd

; soapActions and their corresponding request structure
; Can be found in the wsdl but is stated here for convenience
soapAction[priceCheck] = priceCheckRequest
soapAction[getSuppliers] = getSuppliersRequest

; prefixes and namespaces
xmlns[opc] = http://oss.dbc.dk/ns/openpricecheck
xmlns[pric] = http://biblstandard.dk/acq/serviceman/pricequery.wsdl
xmlns[xs] = http://www.w3.org/2001/XMLSchema
xmlns[xsi] = http://www.w3.org/2001/XMLSchema-instance
xmlns[xsd] = http://www.w3.org/2001/XMLSchema

; path to xml-examples
xmldir = ./xml

; logfile for verbose output
logfile = /tmp/openpricecheck.log

; set verboselevel
;   WARNING - simple warnings
;   ERROR   - errors in response
;   FATAL   - major errors
;   STAT    - Statistical logging
;   TIMER   - timer logging
;   TRACE   - program trace
;   DEBUG   - debugging info
;   Z3959   - calls to z3950 services
;   OCI     - oracle
verbose = WARNING+ERROR+FATAL+STAT+TIMER+TRACE+DEBUG+Z3950+OCI

; format for automatic timer dump %s is the soap-action used
dump_timer = PriceCheck(%s)

; http-address of proxy - if any
;http_proxy = 

; number of seconds we want to wait for an answer
timeout = 3

; suppliers
; supplier[no1][url] - the url for supplier no1
; supplier[no1][timeout] - the timeout (if different than the general above) for supplier no1
; supplier[no1][http_proxy] - the proxy (if different than the general above) for supplier no1
; supplier[no1][soapAction] - the soapAction (if any) for supplier no1
; supplier[no1][skip_validate] - drop validation of answer from supplier - defaults to 0
;
supplier[ifs][url] = http://somepriceservice.dk
supplier[ifs][skip_validate] = 1
supplier[saxo][url] = http://anotherpriceservice.dk
supplier[saxo][soapAction] = http://biblstandard.dk/acq/serviceman/pricequery.wsdl/PriceQuery
supplier[saxo]['namespace'] = http://biblstandard.dk/acq/serviceman/pricequery.wsdl
supplier[saxo][skip_validate] = 0


[aaa]
; aaa Authentication, Access control and Accounting
;
; Creates a authentication object from aaa_ip_rights, aaa_fors_rights or aaa_credentials - in that order
;
; Rights can be set here for selected ip-addresses
; aaa_ip_rights[group-identifier][ip_list] = list of ip's
; aaa_ip_rights[group-identifier][ressource][<named ressource>] = right to <named ressource>
; aaa_ip_rights[group-identifier][ressource][<named ressource 2>] = right to <named ressource 2>
;
aaa_ip_rights[dbc][ip_list] = 172.16.0.0-172.31.255.255;193.111.162.0-193.111.162.255
aaa_ip_rights[dbc][ressource][openpricecheck] = 500
;
; if not found in aaa_ip_rights the authentication object is created from the FORS
; either by using the WS specified by aaa_fors_rights or by OCI specified by aaa_credentials
;
; uri for a fors rights webservice - aaa_fors_rights have precedence over aaa_credentials
;aaa_fors_rights = http://forsrights.some.server/?action=forsRights&outputType=php&userIdAut=%s&groupIdAut=%s&passwordAut=%s&ipAddress=%s
;
; oci credentials for FORS server
;aaa_credentials = ora_user/ora_passwd@some.server.dk
;
; memcache server for the authentication object - use localhost in one-webserver environment
;aaa_cache_address = localhost:11211
; number of seconds to cache authentication and access rights info
;aaa_cache_seconds = 3600
;

[rest]
; REST parameters for SOAPactions
;
; use xml.path.to.par notation to solve name-conflicts
; action[thisSoapAction][foo][] = some.number
; action[thisSoapAction][bar][] = another.number
; to build
; <thisSoapAction>
;   <foo>
;     <number>nn</number>
;   </foo>
;   <bar>
;     <number>mm</number>
;   </bar>
; </thisSoapAction>
; from url: action=thisSoapAction&some.number=nn&another.number=mm
;

action[priceCheck][PriceQuery][Customer][] = CustomerIDType
action[priceCheck][PriceQuery][Customer][] = CustomerID
action[priceCheck][PriceQuery][Material][] = MatIDType
action[priceCheck][PriceQuery][Material][] = MatID
action[priceCheck][] = callback
action[priceCheck][] = outputType

action[getSuppliers][] = callback
action[getSuppliers][] = outputType


[howru]
;test[] = priceCheck
;preg_match[] = hitCount
;error[] = ERROR finding createRelation

